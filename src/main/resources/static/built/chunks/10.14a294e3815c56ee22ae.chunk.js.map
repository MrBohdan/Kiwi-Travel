{"version":3,"sources":["webpack:///./src/components/dashboard/js/mapbox-testing/layers.js","webpack:///./src/components/dashboard/js/mapbox-testing/map-box.js"],"names":["clusterLayer","id","type","source","filter","paint","clusterCountLayer","layout","unclusteredPointLayer","MapBox","useState","width","height","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","dragPan","dragRotate","scrollZoom","touchZoom","touchRotate","keyboard","doubleClickZoom","minZoom","maxZoom","minPitch","maxPitch","settings","setSettings","interactionState","setInteractionState","_sourceRef","React","_onClick","event","feature","features","console","log","clusterId","properties","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","geometry","coordinates","transitionDuration","_renderMarker","station","i","name","e","localStorage","getItem","bartStations","map"],"mappings":"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","file":"./chunks/10.14a294e3815c56ee22ae.chunk.js","sourcesContent":["export const clusterLayer = {\r\n    id: 'clusters',\r\n    type: 'circle',\r\n    source: 'earthquakes',\r\n    filter: ['has', 'point_count'],\r\n    paint: {\r\n      'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\r\n      'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\r\n    }\r\n  };\r\n  \r\n  export const clusterCountLayer = {\r\n    id: 'cluster-count',\r\n    type: 'symbol',\r\n    source: 'earthquakes',\r\n    filter: ['has', 'point_count'],\r\n    layout: {\r\n      'text-field': '{point_count_abbreviated}',\r\n      'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n      'text-size': 12\r\n    }\r\n  };\r\n  \r\n  export const unclusteredPointLayer = {\r\n    id: 'unclustered-point',\r\n    type: 'circle',\r\n    source: 'earthquakes',\r\n    filter: ['!', ['has', 'point_count']],\r\n    paint: {\r\n      'circle-color': '#11b4da',\r\n      'circle-radius': 4,\r\n      'circle-stroke-width': 1,\r\n      'circle-stroke-color': '#fff'\r\n    }\r\n  };","import * as React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport ReactMapGL, { /*Marker,*/ Source, Layer } from 'react-map-gl';\r\nimport { clusterLayer, clusterCountLayer, unclusteredPointLayer } from './layers';\r\nimport bartStations from './bart-station.json';\r\n// import MARKER_STYLE from './marker-style';\r\n\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst MapBox = () => {\r\n    const [viewport, setViewport] = useState({\r\n        width: '100%',\r\n        height: 500,\r\n        latitude: 37.729,\r\n        longitude: -122.36,\r\n        zoom: 11,\r\n        bearing: 0,\r\n        pitch: 50\r\n    });\r\n\r\n    const [settings, setSettings] = useState({\r\n        dragPan: true,\r\n        dragRotate: true,\r\n        scrollZoom: true,\r\n        touchZoom: true,\r\n        touchRotate: true,\r\n        keyboard: true,\r\n        doubleClickZoom: true,\r\n        minZoom: 0,\r\n        maxZoom: 20,\r\n        minPitch: 0,\r\n        maxPitch: 85\r\n    });\r\n\r\n    const [interactionState, setInteractionState] = useState({});\r\n\r\n\r\n    const _sourceRef = React.createRef();\r\n\r\n    const _onClick = (event) => {\r\n        const feature = event.features[0];\r\n        console.log(\"feature\", feature);\r\n        var clusterId;\r\n        if (event.features[0] === null) {\r\n            clusterId = feature.properties.cluster_id;\r\n            console.log(\"feature\", clusterId);\r\n        };\r\n\r\n        const mapboxSource = _sourceRef.current.getSource();\r\n\r\n        mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\r\n            if (err) {\r\n                return;\r\n            }\r\n\r\n            setViewport({\r\n                ...viewport,\r\n                longitude: feature.geometry.coordinates[0],\r\n                latitude: feature.geometry.coordinates[1],\r\n                zoom,\r\n                transitionDuration: 500\r\n            });\r\n        });\r\n    };\r\n\r\n    const _renderMarker = (station, i) => {\r\n        const { name, coordinates } = station;\r\n        return (\r\n            // <Marker\r\n            //     key={i}\r\n            //     longitude={coordinates[0]}\r\n            //     latitude={coordinates[1]}\r\n            //     captureDrag={false}\r\n            //     captureDoubleClick={false}\r\n            // >\r\n            //     <div className=\"station\">\r\n            //         <span>{name}</span>\r\n            //     </div>\r\n            // </Marker>\r\n            <Source\r\n                type=\"geojson\"\r\n                data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\"\r\n                cluster={true}\r\n                clusterMaxZoom={14}\r\n                clusterRadius={50}\r\n                ref={_sourceRef}\r\n            >\r\n                <Layer {...clusterLayer} />\r\n                <Layer {...clusterCountLayer} />\r\n                <Layer {...unclusteredPointLayer} />\r\n            </Source>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <ReactMapGL\r\n            {...viewport}\r\n            {...settings}\r\n            // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n            // onViewportChange={nextViewport => setViewport(nextViewport)}\r\n            // onInteractionStateChange={interactionState => setInteractionState(interactionState)}\r\n\r\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\r\n            onViewportChange={viewport => setViewport(viewport)}\r\n            interactionState={interactionState => setInteractionState(interactionState)}\r\n            interactiveLayerIds={[clusterLayer.id]}\r\n            onClick={(e) => _onClick(e)}\r\n            mapboxApiAccessToken={localStorage.getItem('MapboxToken')}\r\n        >\r\n            {/* <style>{MARKER_STYLE}</style> */}\r\n\r\n            {bartStations.map(_renderMarker)}\r\n        </ReactMapGL>\r\n    );\r\n}\r\n\r\nexport default MapBox;\r\n\r\n"],"sourceRoot":""}